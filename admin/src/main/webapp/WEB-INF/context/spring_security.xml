<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 
                    http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
                    http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/security
                    http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	
	<!-- Protected resources -->
	<http 
		pattern="/api/admin/public/**" 
		create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
					
		<intercept-url pattern="/api/admin/public/**" access="ROLE_ADMIN" />
		<anonymous enabled="false" />		
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
		
	</http>

	<!-- OAuth2 Authentication Entry Point -->
	<bean 
		id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		
		<property name="realmName" value="test" />
		
	</bean>

	<bean 
		id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean 
		id="accessDecisionManager" 
		class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
				<bean class="org.springframework.security.web.access.expression.WebExpressionVoter">
                    <property name="expressionHandler" ref="oauthWebExpressionHandler" />
                </bean>
			</list>
		</constructor-arg>
		
	</bean>
	
	<oauth:web-expression-handler id="oauthWebExpressionHandler" />
	
	<!-- OAuth2 Token Generation Services -->
	<http 
		pattern="/oauth/token" 
		create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		
	</http>
	
	<bean 
		id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />		
		<property name="clientDetailsService" ref="clientDetails" />
		
	</bean>
	
	<bean 
		id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore"> <!-- InMemoryTokenStore, JdbcTokenStore, JwtTokenStore  -->
		
		<constructor-arg ref="dataSource" />
		
	</bean>

	<bean id="approvalStore" class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
        <property name="tokenStore" ref="tokenStore"/>
    </bean>

    <bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler">
        <property name="approvalStore" ref="approvalStore"/>
        <property name="clientDetailsService" ref="clientDetails"/>
        <property name="requestFactory">
            <bean class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
                <constructor-arg index="0" ref="clientDetails"/>
            </bean>
        </property>
    </bean>
		
	<!-- OAuth2 Authorization Server -->
	<oauth:authorization-server
		client-details-service-ref="clientDetails" 
		token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
		
	</oauth:authorization-server>

	<!-- OAuth2 Protected Resources Server -->
	<oauth:resource-server 
		id="resourceServerFilter"
		resource-id="test" 
		token-services-ref="tokenServices" />

	<!-- OAuth2 Client Configuration -->
	<bean 
		id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		
		<property name="authenticationManager" ref="clientAuthenticationManager" />
		
	</bean>
	
	<bean 
		id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		
		<property name="realmName" value="test/client" />
		<property name="typeName" value="Basic" />
		
	</bean>

	<bean 
		id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		
		<constructor-arg ref="clientDetails" />
		
	</bean>
	
	<!-- OAuth2 Client's Authentication Manager -->
	<authentication-manager 
		id="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		
		<authentication-provider user-service-ref="clientDetailsUserService" />
		
	</authentication-manager>
	
	<!-- File based client details access -->
	<oauth:client-details-service 
		id="clientDetails">

		<oauth:client 
			client-id="my-trusted-client"
			authorized-grant-types="password,authorization_code,refresh_token,implicit,redirect"
			authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" redirect-uri="/web"
			scope="read,write,trust" 
			access-token-validity="1209600"
			refresh-token-validity="1209600" />

	</oauth:client-details-service>
	
	<global-method-security 
		pre-post-annotations="enabled" 
		proxy-target-class="true"
		xmlns="http://www.springframework.org/schema/security">
        
        <expression-handler ref="oauthExpressionHandler"/>
        
    </global-method-security>
	
	<oauth:expression-handler id="oauthExpressionHandler" />
	
	<!-- enable use-expressions -->
	<http  
		auto-config="true" 
		use-expressions="true"
		xmlns="http://www.springframework.org/schema/security">

		<headers>
			<cache-control />
		</headers>

		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />		
		<intercept-url pattern="/api/admin/**" access="hasRole('ROLE_ADMIN')" />

		<form-login login-page="/login"
			login-processing-url="/login-check" 
		    default-target-url="/admin/index.html"
			authentication-failure-url="/login-error" 
			username-parameter="username"
			password-parameter="password" 
			authentication-success-handler-ref="customAuthenticationSuccessHandler"
			/>

		<logout logout-success-url="/login?logout" delete-cookies="JSESSIONID" />
		
		<!-- enable csrf protection -->
		<csrf />

		<remember-me 
		    token-validity-seconds="1209600"
			remember-me-parameter="remember-me" 
			data-source-ref="dataSource"
			user-service-ref="userDetailsService" />

	</http>

	<!-- Select users and user_roles from database -->
	<authentication-manager xmlns="http://www.springframework.org/schema/security">
		<authentication-provider>
			<password-encoder ref="encoder" />
			<jdbc-user-service id="userDetailsService" 
				data-source-ref="dataSource"
				users-by-username-query="SELECT username, password, is_active FROM users WHERE username=?"
				authorities-by-username-query="SELECT username, role FROM user_roles WHERE username=?  " />
		</authentication-provider>
	</authentication-manager>

	<bean id="customAuthenticationSuccessHandler" class="com.sangkhim.spring.security.CustomAuthenticationSuccessHandler" />
	<bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

</beans>